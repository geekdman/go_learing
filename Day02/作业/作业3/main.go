package main

import "fmt"

/*
解析执行过程(描述过程)

	a := [3]int{0, 1, 2}
	s := a[1:2]
	s[0] = 11
	s = append(s, 12)
	s = append(s, 13)
	s[0] = 21
	fmt.Println(a)
	fmt.Println(s)
*/
func main() {
	a := [3]int{0, 1, 2} //声明并创建一个长度为3 的int 数组
	s := a[1:2]          //对数组a 进行切片操作，得到类型为slice 的s ，此时s =[1] ,s 的长度为1，容量为2
	s[0] = 11            //修改s 的第一个元素为 11，此时s 的长度为1 容量为2,此时s =[11]。此时由于s是基于数组a 来的。所以修改s[0], 相当于修改数组的索引为1 的元素，此时a = [0,11,12]
	s = append(s, 12)    //在s中添加元素12，得到s =[11,12]，并将s赋值给s变量，结果s长度为2 ，容量为2，s=[11，12],a = [0,11,12]
	s = append(s, 13)    //在s中添加元素13，（由于s 对应的底层数组，容量不够，所以进行了两倍扩容，得到新的数组。并将原来的数据拷贝到新数组中，赋值给变量s）。此时s 的长度为3 容量为4, s=[11,12,13,0]
	//fmt.Println(s,len(s),cap(s))
	s[0] = 21 // 由于s 进行了扩容，底层数组，已经进行了一次拷贝，和原来的数组没有关系。所以a = [0,11,12] s=[21,12,13]
	fmt.Println(a)
	fmt.Println(s, len(s), cap(s))
}
